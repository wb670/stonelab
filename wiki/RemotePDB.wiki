#summary rpdb Remote PDB
#labels PDB,Remote,Python

= 软件介绍 =
rpdb:远程PDB调试工具，是对pdb的扩展。 <br/>
在pdb基础上，做了功能加强，主要特性如下：<br/>
1. 兼容pdb一切语法和使用习惯 <br/>
2. 增加了远程调试功能， 允许你客户端通过telnet连接到指定调试端口，进行远程调试 <br/>
3. 增加了rq/rquit命令，支持安全退出模式，避免默认的quik会导致python程序异常退出的情况 <br/>
4. 允许多次调试 <br/>
5. 增加suspend模式，在启动时强制或者非强制进入断点 <br/>

= 使用说明 =
1) 下载软件 <br/>
https://code.google.com/p/stonelab/downloads/list <br/>
下载rpdb-x.x.x.tar.gz，请选择最新版本，目前是0.2.0 <br/>

2) 解压，将程序拷贝到PYTHON PATH目录 （之后我会写个setup.py脚本，自动安装） <br/>

3）编写，python脚本中启动Rpdb，如下 <br/>
rpdb = Rpdb()             #启动Remote PDB Debugger，使用默认端口：8787，启动时不强制进入断点（有Debugger客户端连接时断点才生效）<br/>
rpdb = Rpdb(8787)         #启动Remote PDB Debugger，使用指定端口：8787，启动时不强制进入断点（有Debugger客户端连接时断点才生效）<br/>
rpdb = Rpdb(startup=True) #启动Remote PDB Debugger，使用默认端口：8787，启动时强制进入断点 <br/>
rpdb = Rpdb(8787, True)   #启动Remote PDB Debugger，使用指定端口：8787，启动时强制进入断点 <br/>
rpdb.set_trace() <br/>

4) 客户端调试 <br/>
telnet xxx.xxx.xxx.xxx 8787 <br/>
命令完全兼容pdb  <br/>
增加rq/rquit命令，用于安全出退，在这种模式下，远程端python程序不会异常退出 <br/>
 
5) 演示
    {{{
pdb = Rpdb()         # 类似于pdb=Pdb()
pdb = Rpdb(8787) # 指定远程调试端口号
pdb.set_trace() #设置断点
    }}}
    如example.py中程序：
    {{{
from rpdb import Rpdb
import random
import time

def add(i, j): 
    r = i + j 
    return r

def main():
    rpdb = Rpdb()               #启动Remote PDB Debugger，使用默认端口：8787，启动时不强制进入断点（有Debugger客户端连接时断点才生效）
    # rpdb = Rpdb(8787)         #启动Remote PDB Debugger，使用指定端口：8787，启动时不强制进入断点（有Debugger客户端连接时断点才生效）
    # rpdb = Rpdb(startup=True) #启动Remote PDB Debugger，使用默认端口：8787，启动时强制进入断点
    # rpdb = Rpdb(8787, True)   #启动Remote PDB Debugger，使用指定端口：8787，启动时强制进入断点
    while True:
        rpdb.set_trace()
        i = random.randint(1, 10) 
        j = random.randint(1, 10) 
        r = add(i, j)
        print r
        time.sleep(1)

if __name__ == '__main__':
    main()
    }}}
    本地终端输入： telnet xxx.xxx.xxx.xxx 8787
    {{{
telnet 127.0.0.1 8787
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
> /Users/stone/Tmp/baidu/rpdb/example.py(15)main()
-> while True:
(Pdb) l 
 10  	
 11  	def main():
 12  	    pdb = Rpdb()
 13  	    # pdb = Rpdb(9999) # debug port:9999
 14  	    pdb.set_trace()
 15  ->	    while True:
 16  	        i = randint(1,10)
 17  	        j = randint(1,10)
 18  	        r = add(i, j)
 19  	        print r
 20  	        sleep(1)
(Pdb) n
> /Users/stone/Tmp/baidu/rpdb/example.py(16)main()
-> i = randint(1,10)
(Pdb) b 19
Breakpoint 1 at /Users/stone/Tmp/baidu/rpdb/example.py:19
(Pdb) c
> /Users/stone/Tmp/baidu/rpdb/example.py(19)main()
-> print r
(Pdb) p r
11
(Pdb) rq
Connection closed by foreign host.
    }}}
    {{{
python rpbd/example.py 
6
13
14
Rpdb(127.0.0.1:54463) debugger: starting.
15
Rpdb(127.0.0.1:54463) debugger: stoped.
6
6
17
11
  
    }}}
    操作和pdb完全一致。

= rpdb常用命令 =
|| 命令 || 介绍 ||
|| h(elp) [command] || 输入h或者help 列出pdb支持的所有命令， h [command] 介绍指定命令 ||
|| w(here) || 列出当前调试所在行，一般会使用 l(ist) ||
|| l(ist) [first[, last]] || 列出源代码信息 ||
|| s(tep) || 进入函数体 ||
|| n(ext) || 执行下一行代码 ||
|| c(ont(inue)) || 继续，直到遇到下一个断点 ||
|| r(eturn) || 执行到函数体结束那行 ||
|| b(reak) || 设置断点，可以是代码行号，方法名， 还可以加进入条件 ||
|| tbreak || 设置临时断点，进入一次后，自动消失 ||
|| cl(ear)  || 取消断点 ||
|| disable || 让断点失效 ||
|| enable || 让断点生效 ||
|| ignore  || 忽略断点n次 ||
|| condition  || 给断点添加条件，符合条件的才进入断点 ||
|| j(ump) lineno || 跳掉指定行 ||
|| a(rgs) || 打印函数体参数信息 ||
|| p expression || 打印变量 ||
|| pp expression || 同上，打印得漂亮一些 ||
|| ! statement || 执行代码，非常有用，可用来修改变量值 ||
|| q(uit) || 退出调试（pdb的quit很黄很暴力） ||
|| rq(uit) || 安全退出（python程序继续运行） ||